import numpy as np
import pandas as pd
from scipy.stats import kendalltau, chi2

# Данные экспертов
data = {
    'Эксперт': ['31', '32', '33', '34', '35'],
    'A1': [10, 9, 20, 100, 1],
    'A2': [6, 7, 12, 50, 0.6],
    'A3': [9, 10, 18, 80, 0.8],
    'A4': [2, 4, 8, 40, 0.4],
    'A5': [4, 5, 10, 50, 0.4],
    'A6': [6, 6, 11, 60, 0.6]
}

# Создаем DataFrame
df = pd.DataFrame(data)

# Убираем столбец "Эксперт" для расчетов
df_values = df.drop(columns=['Эксперт'])

# 1. Расчет групповой экспертной оценки (среднее значение)
group_rating = df_values.mean()
print("Групповая экспертная оценка каждой альтернативы:")
print(group_rating)

# 2. Расчет коэффициента конкордации Кендалла
# Преобразуем данные в матрицу рангов
ranked_data = df_values.rank(axis=1, method='average')

# Сумма рангов по каждой альтернативе
sum_ranks = ranked_data.sum(axis=0)

# Общее количество экспертов и альтернатив
m = len(df_values)  # количество экспертов
n = len(df_values.columns)  # количество альтернатив

# Оценка математического ожидания
F = m * (n + 1) / 2

# Оценка дисперсии
D = ((sum_ranks - F)**2).sum() / (n - 1)

# Максимальное значение дисперсии
D_max = (m**2 * (n**3 - n)) / 12

# Коэффициент конкордации
W = D / D_max
print(f"\nКоэффициент конкордации Кендалла: {W:.4f}")

# 3. Проверка статистической значимости коэффициента конкордации
# Критерий хи-квадрат
chi_square = m * (n - 1) * W
alpha = 0.05  # уровень значимости
critical_value = chi2.ppf(1 - alpha, df=n-1)

print(f"\nКритерий хи-квадрат: {chi_square:.4f}")
print(f"Критическое значение хи-квадрат: {critical_value:.4f}")

if chi_square > critical_value:
    print("Гипотеза об отсутствии связи между ранжировками отвергается (W статистически значим).")
else:
    print("Гипотеза об отсутствии связи между ранжировками не отвергается (W не статистически значим).")